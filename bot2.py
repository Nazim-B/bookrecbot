import logging
import json
import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# üîπ –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7805348721:AAE8rvXimHNzHVmYS_-0p_mssgDMke4ZJ00"  # –í–∞—à —Ç–æ–∫–µ–Ω

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# üóÉÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
try:
    with open(os.path.join(BASE_DIR, "disciplines.json"), "r", encoding="utf-8") as f:
        disciplines_data = json.load(f)
    logging.info(f"JSON –∑–∞–≥—Ä—É–∂–µ–Ω: {len(disciplines_data)} –∫—É—Ä—Å–æ–≤")
except FileNotFoundError:
    logging.error(f"–§–∞–π–ª disciplines.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {BASE_DIR}!")
    disciplines_data = {}
except json.JSONDecodeError:
    logging.error("–§–∞–π–ª disciplines.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON!")
    disciplines_data = {}

# –°–æ–∑–¥–∞—ë–º –º–∞–ø–ø–∏–Ω–≥ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ID
discipline_map = {}
discipline_id_counter = 0
for course_key, course_data in disciplines_data.items():
    for semester_key, semester_data in course_data.items():
        for discipline_name in semester_data.keys():
            discipline_map[str(discipline_id_counter)] = (course_key, semester_key, discipline_name)
            discipline_id_counter += 1
logging.info(f"–°–æ–∑–¥–∞–Ω–æ {len(discipline_map)} –∑–∞–ø–∏—Å–µ–π –≤ –º–∞–ø–ø–∏–Ω–≥–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω")

# üìù –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class StudyNavigation(StatesGroup):
    waiting_for_course = State()
    waiting_for_semester = State()
    waiting_for_discipline = State()
    waiting_for_search_query = State()

# üìö –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
def create_disciplines_keyboard(course: str, semester: str) -> InlineKeyboardMarkup | None:
    logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: course={course}, semester={semester}")
    disciplines = disciplines_data.get(course, {}).get(semester, {})
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {len(disciplines)}")
    if not disciplines:
        logging.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {course}, {semester}")
        return None
    buttons_list = []
    for discipline_name, literature in disciplines.items():
        if literature:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–π
            # –ù–∞—Ö–æ–¥–∏–º ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ –º–∞–ø–ø–∏–Ω–≥–µ
            discipline_id = next(
                key for key, (c, s, d) in discipline_map.items()
                if c == course and s == semester and d == discipline_name
            )
            buttons_list.append([InlineKeyboardButton(
                text=discipline_name,
                callback_data=f"discipline_{discipline_id}"
            )])
    if not buttons_list:
        logging.warning(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞ –¥–ª—è {course}, {semester}")
        return None
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons_list, row_width=2)
    return keyboard

# üìñ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
async def show_recommended_literature(callback: CallbackQuery, course: str, semester: str, discipline: str):
    literature = disciplines_data.get(course, {}).get(semester, {}).get(discipline, [])
    logging.info(f"–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è {discipline}: {literature}")
    if literature:
        response_text = f"üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ: <b>{discipline}</b>\n\n"
        for book in literature:
            response_text += f"üìñ <a href=\"{book['url']}\">{book['title']}</a>"
            author_key = 'authors' if 'authors' in book else 'author'
            if book.get(author_key):
                response_text += f" ({book[author_key]})"
            response_text += "\n"
        await callback.message.answer(response_text, disable_web_page_preview=True)
    else:
        await callback.message.answer("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# 1Ô∏è‚É£ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text="üìò –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", callback_data="recommended_literature")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", callback_data="search_discipline")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    await message.answer(
        """üëã –ü—Ä–∏–≤–µ—Ç!
–Ø ‚Äî Telegram-–±–æ—Ç BookRecBot üìö

–ü–æ–º–æ–≥–∞—é —Å—Ç—É–¥–µ–Ω—Ç–∞–º-–ª–∏–Ω–≥–≤–∏—Å—Ç–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —É—á–µ–±–Ω—É—é –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º.

–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≠–ë–°, PDF –∏–ª–∏ –æ–Ω–ª–∞–π–Ω-—Ä–µ—Å—É—Ä—Å—ã.

üõ† –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ /about —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–µ–∫—Ç–µ.""",
        reply_markup=keyboard
    )

# 2Ô∏è‚É£ –†–∞–∑–¥–µ–ª "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"
@dp.callback_query(F.data == "recommended_literature")
async def recommended_literature_handler(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(text="1 –∫—É—Ä—Å", callback_data="course=1")],
        [InlineKeyboardButton(text="2 –∫—É—Ä—Å", callback_data="course=2")],
        [InlineKeyboardButton(text="3 –∫—É—Ä—Å", callback_data="course=3")],
        [InlineKeyboardButton(text="4 –∫—É—Ä—Å", callback_data="course=4")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(StudyNavigation.waiting_for_course)
    await callback.answer()

@dp.callback_query(F.data.startswith("course="), StudyNavigation.waiting_for_course)
async def course_selection_handler(callback: CallbackQuery, state: FSMContext):
    course_num = callback.data.split("=")[1]
    course = f"course_{course_num}"
    keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton(text="1 —Å–µ–º–µ—Å—Ç—Ä", callback_data=f"semester=1_course={course}")],
        [InlineKeyboardButton(text="2 —Å–µ–º–µ—Å—Ç—Ä", callback_data=f"semester=2_course={course}")]])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä:", reply_markup=keyboard)
    await state.update_data(course=course)
    await state.set_state(StudyNavigation.waiting_for_semester)
    await callback.answer()

@dp.callback_query(F.data.startswith("semester="), StudyNavigation.waiting_for_semester)
async def semester_selection_handler(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    parts = data.split("_")
    if len(parts) < 2 or "course=" not in data:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±–æ—Ä–∞ —Å–µ–º–µ—Å—Ç—Ä–∞.")
        await callback.answer()
        return
    
    semester_part = parts[0]  # semester=1
    course_part = "_".join(parts[1:])  # course=course_1
    semester = semester_part.split("=")[1]
    course = course_part.split("=")[1]
    
    logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ: course={course}, semester={semester}")
    if course and semester:
        semester_key = f"semester_{semester}"
        keyboard = create_disciplines_keyboard(course, semester_key)
        if keyboard:
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=keyboard)
            await state.update_data(course=course, semester=semester_key)
            await state.set_state(StudyNavigation.waiting_for_discipline)
        else:
            await callback.message.answer("üìö –°–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏ —Å–µ–º–µ—Å—Ç—Ä–∞ –ø—É—Å—Ç.")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞ –∏–ª–∏ —Å–µ–º–µ—Å—Ç—Ä–∞.")
    await callback.answer()

@dp.callback_query(F.data.startswith("discipline_"), StudyNavigation.waiting_for_discipline)
async def discipline_selection_handler(callback: CallbackQuery, state: FSMContext):
    discipline_id = callback.data.split("_")[1]
    if discipline_id not in discipline_map:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return
    course, semester, discipline = discipline_map[discipline_id]
    await show_recommended_literature(callback, course, semester, discipline)
    await state.finish()
    await callback.answer()

# 3Ô∏è‚É£ –ü–æ–∏—Å–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
@dp.callback_query(F.data == "search_discipline")
@dp.message(F.text == "/search")
async def search_discipline_handler(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(StudyNavigation.waiting_for_search_query)

@dp.message(StudyNavigation.waiting_for_search_query)
async def process_search_query(message: Message, state: FSMContext):
    query = message.text.strip().lower()
    results = []
    for course_key, course_data in disciplines_data.items():
        for semester_key, semester_data in course_data.items():
            for discipline, literature in semester_data.items():
                if query in discipline.lower():
                    results.append((course_key, semester_key, discipline, literature))
    
    if results:
        response_text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
        for course, semester, discipline, literature in results:
            response_text += f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: <b>{discipline}</b> (–ö—É—Ä—Å: {course.split('_')[1]}, –°–µ–º–µ—Å—Ç—Ä: {semester.split('_')[1]})\n"
            if literature:
                for book in literature:
                    response_text += f"üìñ <a href=\"{book['url']}\">{book['title']}</a>"
                    author_key = 'authors' if 'authors' in book else 'author'
                    if book.get(author_key):
                        response_text += f" ({book[author_key]})"
                    response_text += "\n"
            else:
                response_text += "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            response_text += "\n"
        await message.answer(response_text, disable_web_page_preview=True)
    else:
        await message.answer(f"‚ùå –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await state.finish()

# ‚ÑπÔ∏è –ü–æ–º–æ—â—å
@dp.callback_query(F.data == "help")
async def help_handler(callback: CallbackQuery):
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
        "üìò <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞</b>: –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏ —Å–µ–º–µ—Å—Ç—Ä, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.\n"
        "üîç <b>–ü–æ–∏—Å–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã</b>: –≤–≤–µ–¥–∏—Ç–µ /search –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.\n"
        "–°—Å—ã–ª–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ IPR SMART (–Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)."
    )
    await callback.message.answer(help_text)
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())